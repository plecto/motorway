services:
  # SQS Example stack with elasticmq-native
  # Web dashboard http://localhost:5000
  app_sqs:
    build: .
    command: python examples/sqs_example.py
    volumes:
      - .:/code
    ports:
      - "5000:5000"
    links:
      - elasticmq
    depends_on:
      - elasticmq
    environment:
      - SERVICE_NAME=sqs
      - REGION_NAME=elasticmq
      - AWS_ACCESS_KEY_ID=x
      - AWS_SECRET_ACCESS_KEY=x
      - ENDPOINT_URL=http://elasticmq:9324
      - SQS_QUEUE_NAME=tutorial_motorway

  elasticmq:
    image: softwaremill/elasticmq-native:1.6.11
    ports:
      - "9324:9324"
      - "9325:9325"
    expose:
      - "9324"
      - "9325"
    volumes:
      - ./elasticmq.conf:/opt/elasticmq.conf

  # TO PoC with Kafka client implementation
  # Web dashboard http://localhost:5000
  # app_redpanda:
  #   build: .
  #   command: python examples/redpanda_example.py
  #   volumes:
  #     - .:/code
  #   ports:
  #     - "5000:5000"
  #   links:
  #     - redpanda
  #   depends_on:
  #     - redpanda
  # redpanda:
  #   image: redpandadata/redpanda:latest
  #   ports:
  #     - "9092:9092"
  #     - "9644:9644"
  #   expose:
  #     - "9092"
  #     - "9644"

  ## Generic examples implementation
  ## Port 5000 is the web dashboard
  # web:
  #   build: .
  #   command: python examples/web_only.py
  #   volumes:
  #     - .:/code
  #   ports:
  #     - "5000:5000"
  #   links:
  #     - connections
  #   depends_on:
  #     - connections
  #     - controller
  # controller:
  #   build: .
  #   command: python examples/controller_only.py
  #   volumes:
  #     - .:/code
  #   links:
  #     - connections
  #   depends_on:
  #   - connections
  # connections:
  #   build: .
  #   command: python examples/connection_only.py
  #   volumes:
  #     - .:/code
  #   expose:
  #     - "7007"
  # app:
  #   build: .
  #   command: python examples/app_only.py
  #   volumes:
  #     - .:/code
  #   links:
  #     - connections
  #   depends_on:
  #     - connections
  #     - controller